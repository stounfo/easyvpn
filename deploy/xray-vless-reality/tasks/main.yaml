---
- name: Install dependencies
  apt:
    pkg:
      - unzip
      - curl
      - openssl
    state: present
    update_cache: yes

- name: Download Xray
  get_url:
    url: "https://github.com/XTLS/Xray-core/releases/latest/download/Xray-linux-64.zip"
    dest: /tmp/xray.zip
    mode: '0644'

- name: Extract Xray binary
  unarchive:
    src: /tmp/xray.zip
    dest: /usr/local/bin/
    remote_src: yes
    mode: '0755'
    extra_opts: ['-j']

- name: Create xray user
  user:
    name: xray
    system: yes
    shell: /usr/sbin/nologin

- name: Create directories
  file:
    path: "{{ item }}"
    state: directory
    owner: xray
    group: xray
    mode: '0755'
  loop:
    - /etc/xray
    - /var/log/xray

- name: Generate UUID
  command: /usr/local/bin/xray uuid
  register: generate_uuid
  changed_when: false

# Работа с приватным ключом
- name: Check if private key file exists
  stat:
    path: /etc/xray/private.key
  register: private_key_file

- name: Read private key from file if exists
  when: private_key_file.stat.exists
  slurp:
    src: /etc/xray/private.key
  register: private_key_file_content

- name: Set private_key_cleaned from file content
  when: private_key_file.stat.exists
  set_fact:
    private_key_cleaned: "{{ private_key_file_content.content | b64decode | trim }}"

- name: Generate private key if file not exists
  when: not private_key_file.stat.exists
  command: /usr/local/bin/xray x25519
  register: generate_private_key
  changed_when: false

- name: Prepare private_key_cleaned from generated key
  when: not private_key_file.stat.exists
  set_fact:
    private_key_cleaned: "{{ (generate_private_key.stdout_lines[0].split(':')[1]) | trim }}"

- name: Save private key to file if generated
  when: not private_key_file.stat.exists
  copy:
    dest: /etc/xray/private.key
    content: "{{ private_key_cleaned }}"
    owner: xray
    group: xray
    mode: '0600'

# Работа с публичным ключом
- name: Check if public key file exists
  stat:
    path: /etc/xray/public.key
  register: public_key_file

- name: Read public key from file if exists
  when: public_key_file.stat.exists
  slurp:
    src: /etc/xray/public.key
  register: public_key_file_content

- name: Set public_key_cleaned from file content
  when: public_key_file.stat.exists
  set_fact:
    public_key_cleaned: "{{ public_key_file_content.content | b64decode | trim }}"

- name: Prepare public_key_cleaned from generated key
  when: not public_key_file.stat.exists
  set_fact:
    public_key_cleaned: "{{ generate_private_key.stdout_lines[1].split(':')[1] | trim }}"

- name: Save public key to file if generated
  when: not public_key_file.stat.exists
  copy:
    dest: /etc/xray/public.key
    content: "{{ public_key_cleaned }}"
    owner: xray
    group: xray
    mode: '0644'

# Работа с short_id
- name: Check if short_id file exists
  stat:
    path: /etc/xray/short_id
  register: short_id_file

- name: Read short_id from file if exists
  when: short_id_file.stat.exists
  slurp:
    src: /etc/xray/short_id
  register: short_id_file_content

- name: Set short_id_cleaned from file content
  when: short_id_file.stat.exists
  set_fact:
    short_id_cleaned: "{{ short_id_file_content.content | b64decode | trim }}"

- name: Generate short ID if file not exists
  when: not short_id_file.stat.exists
  command: openssl rand -hex 4
  register: generate_short_id
  changed_when: false

- name: Prepare short_id_cleaned from generated ID
  when: not short_id_file.stat.exists
  set_fact:
    short_id_cleaned: "{{ generate_short_id.stdout | trim | replace('\n','') }}"

- name: Save short_id to file if generated
  when: not short_id_file.stat.exists
  copy:
    dest: /etc/xray/short_id
    content: "{{ short_id_cleaned }}"
    owner: xray
    group: xray
    mode: '0644'

- debug:
    msg:
      private_key: "{{ private_key_cleaned }}"
      public_key: "{{ public_key_cleaned }}"
      short_id: "{{ short_id_cleaned }}"

- name: Deploy Xray config
  template:
    src: config.json.j2
    dest: /etc/xray/config.json
    owner: xray
    group: xray
    mode: '0644'
  vars:
    uuid: "{{ generate_uuid.stdout }}"
    private_key: "{{ private_key_cleaned }}"
    short_id: "{{ short_id_cleaned }}"
  notify: Restart Xray

- name: Deploy systemd service
  copy:
    dest: /etc/systemd/system/xray.service
    content: |
      [Unit]
      Description=Xray Service
      After=network.target
      
      [Service]
      ExecStart=/usr/local/bin/xray run -config /etc/xray/config.json
      Restart=on-failure
      User=xray
      Group=xray
      CapabilityBoundingSet=CAP_NET_ADMIN CAP_NET_BIND_SERVICE
      AmbientCapabilities=CAP_NET_BIND_SERVICE
      
      [Install]
      WantedBy=multi-user.target

- name: Enable Xray service
  systemd:
    name: xray
    enabled: yes
    state: started
